<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Samir Deshar</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Samir Deshar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 19 Nov 2024 12:03:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CURL Cheatsheet</title>
      <link>http://localhost:1313/posts/apm/curl/</link>
      <pubDate>Tue, 19 Nov 2024 12:03:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/apm/curl/</guid>
      
      <description>&lt;h3 id=&#34;save-output-to-a-file&#34;&gt;&lt;strong&gt;Save Output to a File&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -o output.html http://example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;br&gt;
Saves the content of the webpage to a file named &lt;code&gt;output.html&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;follow-redirects&#34;&gt;&lt;strong&gt;Follow Redirects&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -L http://example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;br&gt;
Follows any HTTP redirects and fetches the final destination page.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;show-http-headers&#34;&gt;&lt;strong&gt;Show HTTP Headers&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -I http://example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;br&gt;
Displays only the HTTP headers (e.g., status code, content type) of the requested page.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;download-a-file&#34;&gt;&lt;strong&gt;Download a File&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Understanding DNS : How the Internet Knows Where to Go</title>
      <link>http://localhost:1313/posts/dns/dns/</link>
      <pubDate>Tue, 19 Nov 2024 12:03:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/dns/dns/</guid>
      
      <description>&lt;h3 id=&#34;understanding-dns--how-the-internet-knows-where-to-go&#34;&gt;&lt;strong&gt;Understanding DNS : How the Internet Knows Where to Go&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Domain Name System (DNS)&lt;/strong&gt; is like the internet&amp;rsquo;s phonebook. It helps translate human-friendly domain names (e.g., &lt;code&gt;samirdeshar.com.np&lt;/code&gt;) into machine-friendly IP addresses (e.g., &lt;code&gt;172.66.44.181&lt;/code&gt;) so computers can find and connect to websites or services.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-dns&#34;&gt;&lt;strong&gt;What Is DNS?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Imagine if you had to memorize IP addresses like &lt;code&gt;172.66.44.181&lt;/code&gt; every time you wanted to visit a website. That would be difficult! DNS solves this by associating domain names with their respective IP addresses. It works in the background whenever you access a website, send an email, or use an online service.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>HOW DOES HALF PROXY WORK</title>
      <link>http://localhost:1313/posts/half-proxy/halfproxy/</link>
      <pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/half-proxy/halfproxy/</guid>
      
      <description>&lt;p&gt;So basically the half proxies are those that initiate connection to the proxy and forward the connection to the server. While the server repose directly back to the client.
This is also known as DSR(Direct Server Response).&lt;/p&gt;
&lt;h3 id=&#34;step-on-how-this-works-and-why-would-client-accept-the-response-from-a-completely-new-ip-than-the-proxy-vs-which-we-had-requested-for&#34;&gt;Step on how this works and why would client accept the response from a completely new ip than the proxy VS which we had requested for?&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s assume following.
&lt;strong&gt;CLIENT&lt;/strong&gt; -&amp;gt; 192.168.1.1
&lt;strong&gt;VS&lt;/strong&gt;/&lt;strong&gt;PROXY&lt;/strong&gt; -&amp;gt; 10.2.0.1
&lt;strong&gt;SERVER&lt;/strong&gt; -&amp;gt; 10.3.0.1&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How SSO works?</title>
      <link>http://localhost:1313/posts/apm/sso/</link>
      <pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/apm/sso/</guid>
      
      <description>&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;User Logs In&lt;/strong&gt;: The user accesses the SSO portal (or initiates login through a service provider) and enters their credentials (username and password).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credential Verification&lt;/strong&gt;: The SSO system sends the credentials to an authentication server, which could use protocols like &lt;strong&gt;LDAP&lt;/strong&gt;, &lt;strong&gt;Active Directory (AD)&lt;/strong&gt;, &lt;strong&gt;OAuth&lt;/strong&gt;, or &lt;strong&gt;SAML&lt;/strong&gt; to verify the user’s identity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: The authentication server checks the credentials against a database (like AD or a cloud identity service) and either approves or denies the login request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token Issuance&lt;/strong&gt;: If the credentials are correct, the SSO system issues an authentication token, which can be in the form of a &lt;strong&gt;JWT&lt;/strong&gt;, &lt;strong&gt;SAML assertion&lt;/strong&gt;, or &lt;strong&gt;OAuth token&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessing Applications&lt;/strong&gt;: The user uses this token to request access to various linked applications without re-entering their credentials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Verification&lt;/strong&gt;: Each application the user tries to access checks the validity of the token with the SSO system or validates it locally based on the application&amp;rsquo;s configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session Management&lt;/strong&gt;: The user remains authenticated across multiple applications until the session expires or the user logs out.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;different-protocols-used-in-sso&#34;&gt;Different Protocols Used in SSO:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SAML (Security Assertion Markup Language)&lt;/strong&gt;: XML-based, widely used in enterprise environments for browser-based SSO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OAuth (Open Authorization)&lt;/strong&gt;: Token-based, typically used in mobile and web apps for secure API access.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenID Connect (OIDC)&lt;/strong&gt;: Built on top of OAuth 2.0, it adds an identity layer to OAuth, making it suitable for both authentication and authorization.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;saml-security-assertion-markup-language&#34;&gt;SAML (Security Assertion Markup Language)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SAML&lt;/strong&gt; is an &lt;strong&gt;XML-based protocol&lt;/strong&gt; that enables &lt;strong&gt;Single Sign-On (SSO)&lt;/strong&gt; by exchanging authentication and authorization data between two entities: the &lt;strong&gt;Identity Provider (IdP)&lt;/strong&gt; and the &lt;strong&gt;Service Provider (SP)&lt;/strong&gt;. It is commonly used in enterprise environments to allow users to access multiple web applications without having to log in repeatedly.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>OAuth Working</title>
      <link>http://localhost:1313/posts/apm/oauth/</link>
      <pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/apm/oauth/</guid>
      
      <description>&lt;p&gt;&lt;strong&gt;OAuth&lt;/strong&gt; is a method for authorization that allows access to third-party applications or services without requiring the sharing of usernames and passwords.&lt;/p&gt;
&lt;h2 id=&#34;how-oauth-20-works&#34;&gt;How OAuth 2.0 Works?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;OAuth 2.0&lt;/strong&gt; is an authorization protocol designed to provide secure delegated access to resources without exposing user credentials to third-party applications.&lt;/p&gt;
&lt;h3 id=&#34;key-components&#34;&gt;&lt;strong&gt;Key Components&lt;/strong&gt;:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource Owner&lt;/strong&gt;: The user who owns the data or resource.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: The application requesting access to the user’s resource on behalf of the user (e.g., a web or mobile app).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Server&lt;/strong&gt;: The server hosting the protected resources (e.g., an API).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authorization Server&lt;/strong&gt;: The server that authenticates the user and issues &lt;strong&gt;access tokens&lt;/strong&gt;. This may be the same as the Resource Server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oauth-flows-grant-types&#34;&gt;&lt;strong&gt;OAuth Flows (Grant Types)&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;OAuth 2.0 offers different authorization flows based on the type of application and security requirements.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/curl/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/curl/curl/</guid>
      
      <description>&lt;h3 id=&#34;save-output-to-a-file&#34;&gt;&lt;strong&gt;Save Output to a File&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -o output.html http://example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;br&gt;
Saves the content of the webpage to a file named &lt;code&gt;output.html&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;follow-redirects&#34;&gt;&lt;strong&gt;Follow Redirects&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -L http://example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;br&gt;
Follows any HTTP redirects and fetches the final destination page.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;show-http-headers&#34;&gt;&lt;strong&gt;Show HTTP Headers&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -I http://example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;br&gt;
Displays only the HTTP headers (e.g., status code, content type) of the requested page.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;download-a-file&#34;&gt;&lt;strong&gt;Download a File&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/learning-kerberos/learningkerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-kerberos/learningkerberos/</guid>
      
      <description>&lt;h3 id=&#34;what-is-kerberos&#34;&gt;What is Kerberos?&lt;/h3&gt;
&lt;p&gt;Kerberos is a secure network authentication protocol, widely used as the default authentication mechanism for Microsoft Windows domains. It uses a ticket-based system and strong encryption to authenticate users and services securely. Kerberos improves on older protocols like NTLM by employing third-party ticket authorization and enhanced security measures. However, it still has exploitable vulnerabilities that attackers can leverage.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;how-does-kerberos-work&#34;&gt;How Does Kerberos Work?&lt;/h3&gt;
&lt;p&gt;Kerberos operates as a &lt;strong&gt;Single Sign-On (SSO)&lt;/strong&gt; protocol using a ticket-based authentication scheme. The user’s password is stored as a hashed value in the Security Account Manager (SAM) database on Windows systems:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/pages/about/</guid>
      
      <description>&lt;p&gt;This is me documenting what I have learn.
It&amp;rsquo;s my understanding hope anyone reading this finds it insightfull.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
